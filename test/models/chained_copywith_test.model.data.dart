// Generated by data class generator
// DO NOT MODIFY BY HAND

part of 'chained_copywith_test.model.dart';

mixin _User {
  abstract final String name;
  abstract final int age;
  abstract final String? email;

  _UserCopyWith get copyWith => _UserCopyWith._(this);

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) return true;
    if (other is! User) return false;

    if (name != other.name) {
      return false;
    }
    if (age != other.age) {
      return false;
    }
    if (email != other.email) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    return Object.hashAll([
      name,
      age,
      email,
    ]);
  }

  @override
  String toString() {
    return 'User(name: $name, age: $age, email: $email)';
  }

  Map<String, dynamic> toJson() {
    final map = <String, dynamic>{};
    map['name'] = name;
    map['age'] = age;
    if (email != null) {
      map['email'] = email;
    }
    return map;
  }

  static User fromJson(Map<String, dynamic> map) {
    return User(
      name: SafeCasteUtil.safeCast<String>(map['name']) ?? "",
      age: SafeCasteUtil.safeCast<int>(map['age']) ?? 0,
      email: SafeCasteUtil.safeCast<String>(map['email']),
    );
  }
}

mixin _Address {
  abstract final String street;
  abstract final String city;
  abstract final String? zipCode;

  _AddressCopyWith get copyWith => _AddressCopyWith._(this);

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) return true;
    if (other is! Address) return false;

    if (street != other.street) {
      return false;
    }
    if (city != other.city) {
      return false;
    }
    if (zipCode != other.zipCode) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    return Object.hashAll([
      street,
      city,
      zipCode,
    ]);
  }

  @override
  String toString() {
    return 'Address(street: $street, city: $city, zipCode: $zipCode)';
  }

  Map<String, dynamic> toJson() {
    final map = <String, dynamic>{};
    map['street'] = street;
    map['city'] = city;
    if (zipCode != null) {
      map['zipCode'] = zipCode;
    }
    return map;
  }

  static Address fromJson(Map<String, dynamic> map) {
    return Address(
      street: SafeCasteUtil.safeCast<String>(map['street']) ?? "",
      city: SafeCasteUtil.safeCast<String>(map['city']) ?? "",
      zipCode: SafeCasteUtil.safeCast<String>(map['zipCode']),
    );
  }
}

mixin _Profile {
  abstract final User user;
  abstract final Address address;
  abstract final List<String> tags;

  _ProfileCopyWith get copyWith => _ProfileCopyWith._(this);

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) return true;
    if (other is! Profile) return false;

    if (user != other.user) {
      return false;
    }
    if (address != other.address) {
      return false;
    }
    if (!DeepCollectionEquality().equals(tags, other.tags)) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    return Object.hashAll([
      user,
      address,
      DeepCollectionEquality().hash(tags),
    ]);
  }

  @override
  String toString() {
    return 'Profile(user: $user, address: $address, tags: $tags)';
  }

  Map<String, dynamic> toJson() {
    final map = <String, dynamic>{};
    map['user'] = user;
    map['address'] = address;
    map['tags'] = tags;
    return map;
  }

  static Profile fromJson(Map<String, dynamic> map) {
    return Profile(
      user: User.fromJson((map['user'] ?? {}) as Map<String, dynamic>),
      address: Address.fromJson((map['address'] ?? {}) as Map<String, dynamic>),
      tags: ((map['tags'] as List<dynamic>?) ?? [])
          .map((e) => e.toString())
          .toList(),
    );
  }
}

/// Helper class for chained copyWith operations
class _UserCopyWith {
  final _User _instance;
  const _UserCopyWith._(this._instance);

  /// Update name field
  User name(String value) {
    return User(
      name: value,
      age: _instance.age,
      email: _instance.email,
    );
  }

  /// Update age field
  User age(int value) {
    return User(
      name: _instance.name,
      age: value,
      email: _instance.email,
    );
  }

  /// Update email field
  User email(String? value) {
    return User(
      name: _instance.name,
      age: _instance.age,
      email: value,
    );
  }

  /// Traditional copyWith method
  User call({
    String? name,
    int? age,
    String? email,
  }) {
    return User(
      name: name ?? _instance.name,
      age: age ?? _instance.age,
      email: email ?? _instance.email,
    );
  }
}

/// Helper class for chained copyWith operations
class _AddressCopyWith {
  final _Address _instance;
  const _AddressCopyWith._(this._instance);

  /// Update street field
  Address street(String value) {
    return Address(
      street: value,
      city: _instance.city,
      zipCode: _instance.zipCode,
    );
  }

  /// Update city field
  Address city(String value) {
    return Address(
      street: _instance.street,
      city: value,
      zipCode: _instance.zipCode,
    );
  }

  /// Update zipCode field
  Address zipCode(String? value) {
    return Address(
      street: _instance.street,
      city: _instance.city,
      zipCode: value,
    );
  }

  /// Traditional copyWith method
  Address call({
    String? street,
    String? city,
    String? zipCode,
  }) {
    return Address(
      street: street ?? _instance.street,
      city: city ?? _instance.city,
      zipCode: zipCode ?? _instance.zipCode,
    );
  }
}

/// Helper class for chained copyWith operations
class _ProfileCopyWith {
  final _Profile _instance;
  const _ProfileCopyWith._(this._instance);

  /// Update user field
  Profile user(User value) {
    return Profile(
      user: value,
      address: _instance.address,
      tags: _instance.tags,
    );
  }

  /// Update address field
  Profile address(Address value) {
    return Profile(
      user: _instance.user,
      address: value,
      tags: _instance.tags,
    );
  }

  /// Update tags field
  Profile tags(List<String> value) {
    return Profile(
      user: _instance.user,
      address: _instance.address,
      tags: value,
    );
  }

  /// Nested copyWith for user field
  _ProfileNestedCopyWithUser get userBuilder {
    return _ProfileNestedCopyWithUser._(_instance);
  }

  /// Nested copyWith for address field
  _ProfileNestedCopyWithAddress get addressBuilder {
    return _ProfileNestedCopyWithAddress._(_instance);
  }

  /// Traditional copyWith method
  Profile call({
    User? user,
    Address? address,
    List<String>? tags,
  }) {
    return Profile(
      user: user ?? _instance.user,
      address: address ?? _instance.address,
      tags: tags ?? _instance.tags,
    );
  }
}

/// Nested copyWith helper class for user field
class _ProfileNestedCopyWithUser {
  final _Profile _instance;
  const _ProfileNestedCopyWithUser._(this._instance);

  /// Update user field using a copyWith function
  Profile call(User Function(User) updater) {
    final currentValue = _instance.user;
    final updatedValue = updater(currentValue);
    return Profile(
      user: updatedValue,
      address: _instance.address,
      tags: _instance.tags,
    );
  }
}

/// Nested copyWith helper class for address field
class _ProfileNestedCopyWithAddress {
  final _Profile _instance;
  const _ProfileNestedCopyWithAddress._(this._instance);

  /// Update address field using a copyWith function
  Profile call(Address Function(Address) updater) {
    final currentValue = _instance.address;
    final updatedValue = updater(currentValue);
    return Profile(
      user: _instance.user,
      address: updatedValue,
      tags: _instance.tags,
    );
  }
}
