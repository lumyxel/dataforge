// Generated by data class generator
// DO NOT MODIFY BY HAND

part of 'nested_objects.model.dart';

mixin _Address {
  abstract final String street;
  abstract final String city;
  abstract final String? state;
  abstract final String zipCode;
  abstract final String country;
  abstract final bool isPrimary;

  _AddressCopyWith get copyWith => _AddressCopyWith._(this as Address);

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) return true;
    if (other is! Address) return false;

    if (street != other.street) {
      return false;
    }
    if (city != other.city) {
      return false;
    }
    if (state != other.state) {
      return false;
    }
    if (zipCode != other.zipCode) {
      return false;
    }
    if (country != other.country) {
      return false;
    }
    if (isPrimary != other.isPrimary) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    return Object.hashAll([
      street,
      city,
      state,
      zipCode,
      country,
      isPrimary,
    ]);
  }
  @override
  String toString() {
    return 'Address(street: $street, city: $city, state: $state, zipCode: $zipCode, country: $country, isPrimary: $isPrimary)';
  }


  Map<String, dynamic> toJson() {
    final map = <String, dynamic>{};
    map['street'] = street;
    map['city'] = city;
    if (state != null) {
      map['state'] = state;
    }
    map['zipCode'] = zipCode;
    map['country'] = country;
    map['is_primary'] = isPrimary;
    return map;
  }

  static Address fromJson(Map<String, dynamic> map) {
    return Address(
      street: SafeCasteUtil.safeCast<String>(map['street']) ?? "",
      city: SafeCasteUtil.safeCast<String>(map['city']) ?? "",
      state: SafeCasteUtil.safeCast<String>(map['state']),
      zipCode: SafeCasteUtil.safeCast<String>(map['zipCode']) ?? "",
      country: SafeCasteUtil.safeCast<String>(map['country']) ?? "",
      isPrimary: SafeCasteUtil.safeCast<bool>(map['is_primary']) ?? false,
    );
  }
}

mixin _Contact {
  abstract final String email;
  abstract final String? phone;
  abstract final String contactType;

  _ContactCopyWith get copyWith => _ContactCopyWith._(this as Contact);

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) return true;
    if (other is! Contact) return false;

    if (email != other.email) {
      return false;
    }
    if (phone != other.phone) {
      return false;
    }
    if (contactType != other.contactType) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    return Object.hashAll([
      email,
      phone,
      contactType,
    ]);
  }
  @override
  String toString() {
    return 'Contact(email: $email, phone: $phone, contactType: $contactType)';
  }


  Map<String, dynamic> toJson() {
    final map = <String, dynamic>{};
    map['email'] = email;
    if (phone != null) {
      map['phone'] = phone;
    }
    map['contact_type'] = contactType;
    return map;
  }

  static Contact fromJson(Map<String, dynamic> map) {
    return Contact(
      email: SafeCasteUtil.safeCast<String>(map['email']) ?? "",
      phone: SafeCasteUtil.safeCast<String>(map['phone']),
      contactType: SafeCasteUtil.safeCast<String>(map['contact_type']) ?? "",
    );
  }
}

mixin _Company {
  abstract final String name;
  abstract final Address headquarters;
  abstract final List<Address>? branches;
  abstract final Contact primaryContact;
  abstract final List<Contact>? additionalContacts;

  _CompanyCopyWith get copyWith => _CompanyCopyWith._(this as Company);

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) return true;
    if (other is! Company) return false;

    if (name != other.name) {
      return false;
    }
    if (headquarters != other.headquarters) {
      return false;
    }
    if (!DeepCollectionEquality().equals(branches, other.branches)) {
      return false;
    }
    if (primaryContact != other.primaryContact) {
      return false;
    }
    if (!DeepCollectionEquality().equals(additionalContacts, other.additionalContacts)) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    return Object.hashAll([
      name,
      headquarters,
      DeepCollectionEquality().hash(branches),
      primaryContact,
      DeepCollectionEquality().hash(additionalContacts),
    ]);
  }
  @override
  String toString() {
    return 'Company(name: $name, headquarters: $headquarters, branches: $branches, primaryContact: $primaryContact, additionalContacts: $additionalContacts)';
  }


  Map<String, dynamic> toJson() {
    final map = <String, dynamic>{};
    map['name'] = name;
    map['headquarters'] = headquarters;
    if (branches != null) {
      map['branches'] = branches;
    }
    map['primaryContact'] = primaryContact;
    if (additionalContacts != null) {
      map['additionalContacts'] = additionalContacts;
    }
    return map;
  }

  static Company fromJson(Map<String, dynamic> map) {
    return Company(
      name: SafeCasteUtil.safeCast<String>(map['name']) ?? "",
      headquarters: Address.fromJson((map['headquarters'] ?? {}) as Map<String, dynamic>),
      branches: (map['branches'] as List<dynamic>?)?.map((e) => Address.fromJson(e as Map<String, dynamic>)).toList()?.cast<Address>(),
      primaryContact: Contact.fromJson((map['primaryContact'] ?? {}) as Map<String, dynamic>),
      additionalContacts: (map['additionalContacts'] as List<dynamic>?)?.map((e) => Contact.fromJson(e as Map<String, dynamic>)).toList()?.cast<Contact>(),
    );
  }
}

mixin _NestedObjects {
  abstract final String name;
  abstract final Address homeAddress;
  abstract final Address? workAddress;
  abstract final List<Address> previousAddresses;
  abstract final Map<String, Address>? namedAddresses;
  abstract final Contact primaryContact;
  abstract final List<Contact>? contacts;
  abstract final Company? employer;
  abstract final Address? customAddress;
  abstract final List<Contact>? parsedContacts;

  _NestedObjectsCopyWith get copyWith => _NestedObjectsCopyWith._(this as NestedObjects);

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) return true;
    if (other is! NestedObjects) return false;

    if (name != other.name) {
      return false;
    }
    if (homeAddress != other.homeAddress) {
      return false;
    }
    if (workAddress != other.workAddress) {
      return false;
    }
    if (!DeepCollectionEquality().equals(previousAddresses, other.previousAddresses)) {
      return false;
    }
    if (!DeepCollectionEquality().equals(namedAddresses, other.namedAddresses)) {
      return false;
    }
    if (primaryContact != other.primaryContact) {
      return false;
    }
    if (!DeepCollectionEquality().equals(contacts, other.contacts)) {
      return false;
    }
    if (employer != other.employer) {
      return false;
    }
    if (customAddress != other.customAddress) {
      return false;
    }
    if (!DeepCollectionEquality().equals(parsedContacts, other.parsedContacts)) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    return Object.hashAll([
      name,
      homeAddress,
      workAddress,
      DeepCollectionEquality().hash(previousAddresses),
      DeepCollectionEquality().hash(namedAddresses),
      primaryContact,
      DeepCollectionEquality().hash(contacts),
      employer,
      customAddress,
      DeepCollectionEquality().hash(parsedContacts),
    ]);
  }
  @override
  String toString() {
    return 'NestedObjects(name: $name, homeAddress: $homeAddress, workAddress: $workAddress, previousAddresses: $previousAddresses, namedAddresses: $namedAddresses, primaryContact: $primaryContact, contacts: $contacts, employer: $employer, customAddress: $customAddress, parsedContacts: $parsedContacts)';
  }


  Map<String, dynamic> toJson() {
    final map = <String, dynamic>{};
    map['name'] = name;
    map['homeAddress'] = homeAddress;
    if (workAddress != null) {
      map['workAddress'] = workAddress;
    }
    map['previousAddresses'] = previousAddresses;
    if (namedAddresses != null) {
      map['namedAddresses'] = namedAddresses;
    }
    map['primaryContact'] = primaryContact;
    if (contacts != null) {
      map['contacts'] = contacts;
    }
    if (employer != null) {
      map['employer'] = employer;
    }
    if (customAddress != null) {
      map['customAddress'] = customAddress;
    }
    if (parsedContacts != null) {
      map['parsedContacts'] = parsedContacts;
    }
    return map;
  }

  static NestedObjects fromJson(Map<String, dynamic> map) {
    final parsedContactsReadValue = NestedObjects._readValue(map, 'parsedContacts');
    return NestedObjects(
      name: SafeCasteUtil.safeCast<String>(map['name']) ?? "",
      homeAddress: Address.fromJson((map['homeAddress'] ?? {}) as Map<String, dynamic>),
      workAddress: map['workAddress'] != null ? Address.fromJson(map['workAddress'] as Map<String, dynamic>) : null,
      previousAddresses: (map['previousAddresses'] as List<dynamic>?)?.map((e) => Address.fromJson(e as Map<String, dynamic>)).toList()?.cast<Address>() ?? [],
      namedAddresses: (map['namedAddresses'] as Map<String, dynamic>?)?.map((key, value) => MapEntry(key, Address.fromJson(value as Map<String, dynamic>))),
      primaryContact: Contact.fromJson((map['primaryContact'] ?? {}) as Map<String, dynamic>),
      contacts: (map['contacts'] as List<dynamic>?)?.map((e) => Contact.fromJson(e as Map<String, dynamic>)).toList()?.cast<Contact>(),
      employer: map['employer'] != null ? Company.fromJson(map['employer'] as Map<String, dynamic>) : null,
      customAddress: map['customAddress'] != null ? Address.fromJson(map['customAddress'] as Map<String, dynamic>) : null,
      parsedContacts: parsedContactsReadValue != null ? (parsedContactsReadValue as List?)?.map((e) => Contact.fromJson(e as Map<String, dynamic>)).toList() : null,
    );
  }
}


/// Helper class for chained copyWith operations
class _AddressCopyWith {
  final Address _instance;
  const _AddressCopyWith._(this._instance);

  /// Update street field
  _AddressCopyWith street(String value) {
    return _AddressCopyWith._(Address(
      street: value,
      city: _instance.city,
      state: _instance.state,
      zipCode: _instance.zipCode,
      country: _instance.country,
      isPrimary: _instance.isPrimary,
    ));
  }

  /// Update city field
  _AddressCopyWith city(String value) {
    return _AddressCopyWith._(Address(
      street: _instance.street,
      city: value,
      state: _instance.state,
      zipCode: _instance.zipCode,
      country: _instance.country,
      isPrimary: _instance.isPrimary,
    ));
  }

  /// Update state field
  _AddressCopyWith state(String? value) {
    return _AddressCopyWith._(Address(
      street: _instance.street,
      city: _instance.city,
      state: value,
      zipCode: _instance.zipCode,
      country: _instance.country,
      isPrimary: _instance.isPrimary,
    ));
  }

  /// Update zipCode field
  _AddressCopyWith zipCode(String value) {
    return _AddressCopyWith._(Address(
      street: _instance.street,
      city: _instance.city,
      state: _instance.state,
      zipCode: value,
      country: _instance.country,
      isPrimary: _instance.isPrimary,
    ));
  }

  /// Update country field
  _AddressCopyWith country(String value) {
    return _AddressCopyWith._(Address(
      street: _instance.street,
      city: _instance.city,
      state: _instance.state,
      zipCode: _instance.zipCode,
      country: value,
      isPrimary: _instance.isPrimary,
    ));
  }

  /// Update isPrimary field
  _AddressCopyWith isPrimary(bool value) {
    return _AddressCopyWith._(Address(
      street: _instance.street,
      city: _instance.city,
      state: _instance.state,
      zipCode: _instance.zipCode,
      country: _instance.country,
      isPrimary: value,
    ));
  }

  /// Build the final instance
  Address build() {
    return _instance as Address;
  }

  /// Traditional copyWith method
  Address call({
    String? street,
    String? city,
    String? state,
    String? zipCode,
    String? country,
    bool? isPrimary,
  }) {
    return Address(
      street: street ?? _instance.street,
      city: city ?? _instance.city,
      state: state ?? _instance.state,
      zipCode: zipCode ?? _instance.zipCode,
      country: country ?? _instance.country,
      isPrimary: isPrimary ?? _instance.isPrimary,
    );
  }
}


/// Helper class for chained copyWith operations
class _ContactCopyWith {
  final Contact _instance;
  const _ContactCopyWith._(this._instance);

  /// Update email field
  _ContactCopyWith email(String value) {
    return _ContactCopyWith._(Contact(
      email: value,
      phone: _instance.phone,
      contactType: _instance.contactType,
    ));
  }

  /// Update phone field
  _ContactCopyWith phone(String? value) {
    return _ContactCopyWith._(Contact(
      email: _instance.email,
      phone: value,
      contactType: _instance.contactType,
    ));
  }

  /// Update contactType field
  _ContactCopyWith contactType(String value) {
    return _ContactCopyWith._(Contact(
      email: _instance.email,
      phone: _instance.phone,
      contactType: value,
    ));
  }

  /// Build the final instance
  Contact build() {
    return _instance as Contact;
  }

  /// Traditional copyWith method
  Contact call({
    String? email,
    String? phone,
    String? contactType,
  }) {
    return Contact(
      email: email ?? _instance.email,
      phone: phone ?? _instance.phone,
      contactType: contactType ?? _instance.contactType,
    );
  }
}


/// Helper class for chained copyWith operations
class _CompanyCopyWith {
  final Company _instance;
  const _CompanyCopyWith._(this._instance);

  /// Update name field
  _CompanyCopyWith name(String value) {
    return _CompanyCopyWith._(Company(
      name: value,
      headquarters: _instance.headquarters,
      branches: _instance.branches,
      primaryContact: _instance.primaryContact,
      additionalContacts: _instance.additionalContacts,
    ));
  }

  /// Update headquarters field
  _CompanyCopyWith headquarters(Address value) {
    return _CompanyCopyWith._(Company(
      name: _instance.name,
      headquarters: value,
      branches: _instance.branches,
      primaryContact: _instance.primaryContact,
      additionalContacts: _instance.additionalContacts,
    ));
  }

  /// Update branches field
  _CompanyCopyWith branches(List<Address>? value) {
    return _CompanyCopyWith._(Company(
      name: _instance.name,
      headquarters: _instance.headquarters,
      branches: value,
      primaryContact: _instance.primaryContact,
      additionalContacts: _instance.additionalContacts,
    ));
  }

  /// Update primaryContact field
  _CompanyCopyWith primaryContact(Contact value) {
    return _CompanyCopyWith._(Company(
      name: _instance.name,
      headquarters: _instance.headquarters,
      branches: _instance.branches,
      primaryContact: value,
      additionalContacts: _instance.additionalContacts,
    ));
  }

  /// Update additionalContacts field
  _CompanyCopyWith additionalContacts(List<Contact>? value) {
    return _CompanyCopyWith._(Company(
      name: _instance.name,
      headquarters: _instance.headquarters,
      branches: _instance.branches,
      primaryContact: _instance.primaryContact,
      additionalContacts: value,
    ));
  }

  /// Build the final instance
  Company build() {
    return _instance as Company;
  }

  /// Traditional copyWith method
  Company call({
    String? name,
    Address? headquarters,
    List<Address>? branches,
    Contact? primaryContact,
    List<Contact>? additionalContacts,
  }) {
    return Company(
      name: name ?? _instance.name,
      headquarters: headquarters ?? _instance.headquarters,
      branches: branches ?? _instance.branches,
      primaryContact: primaryContact ?? _instance.primaryContact,
      additionalContacts: additionalContacts ?? _instance.additionalContacts,
    );
  }
}


/// Helper class for chained copyWith operations
class _NestedObjectsCopyWith {
  final NestedObjects _instance;
  const _NestedObjectsCopyWith._(this._instance);

  /// Update name field
  _NestedObjectsCopyWith name(String value) {
    return _NestedObjectsCopyWith._(NestedObjects(
      name: value,
      homeAddress: _instance.homeAddress,
      workAddress: _instance.workAddress,
      previousAddresses: _instance.previousAddresses,
      namedAddresses: _instance.namedAddresses,
      primaryContact: _instance.primaryContact,
      contacts: _instance.contacts,
      employer: _instance.employer,
      customAddress: _instance.customAddress,
      parsedContacts: _instance.parsedContacts,
    ));
  }

  /// Update homeAddress field
  _NestedObjectsCopyWith homeAddress(Address value) {
    return _NestedObjectsCopyWith._(NestedObjects(
      name: _instance.name,
      homeAddress: value,
      workAddress: _instance.workAddress,
      previousAddresses: _instance.previousAddresses,
      namedAddresses: _instance.namedAddresses,
      primaryContact: _instance.primaryContact,
      contacts: _instance.contacts,
      employer: _instance.employer,
      customAddress: _instance.customAddress,
      parsedContacts: _instance.parsedContacts,
    ));
  }

  /// Update workAddress field
  _NestedObjectsCopyWith workAddress(Address? value) {
    return _NestedObjectsCopyWith._(NestedObjects(
      name: _instance.name,
      homeAddress: _instance.homeAddress,
      workAddress: value,
      previousAddresses: _instance.previousAddresses,
      namedAddresses: _instance.namedAddresses,
      primaryContact: _instance.primaryContact,
      contacts: _instance.contacts,
      employer: _instance.employer,
      customAddress: _instance.customAddress,
      parsedContacts: _instance.parsedContacts,
    ));
  }

  /// Update previousAddresses field
  _NestedObjectsCopyWith previousAddresses(List<Address> value) {
    return _NestedObjectsCopyWith._(NestedObjects(
      name: _instance.name,
      homeAddress: _instance.homeAddress,
      workAddress: _instance.workAddress,
      previousAddresses: value,
      namedAddresses: _instance.namedAddresses,
      primaryContact: _instance.primaryContact,
      contacts: _instance.contacts,
      employer: _instance.employer,
      customAddress: _instance.customAddress,
      parsedContacts: _instance.parsedContacts,
    ));
  }

  /// Update namedAddresses field
  _NestedObjectsCopyWith namedAddresses(Map<String, Address>? value) {
    return _NestedObjectsCopyWith._(NestedObjects(
      name: _instance.name,
      homeAddress: _instance.homeAddress,
      workAddress: _instance.workAddress,
      previousAddresses: _instance.previousAddresses,
      namedAddresses: value,
      primaryContact: _instance.primaryContact,
      contacts: _instance.contacts,
      employer: _instance.employer,
      customAddress: _instance.customAddress,
      parsedContacts: _instance.parsedContacts,
    ));
  }

  /// Update primaryContact field
  _NestedObjectsCopyWith primaryContact(Contact value) {
    return _NestedObjectsCopyWith._(NestedObjects(
      name: _instance.name,
      homeAddress: _instance.homeAddress,
      workAddress: _instance.workAddress,
      previousAddresses: _instance.previousAddresses,
      namedAddresses: _instance.namedAddresses,
      primaryContact: value,
      contacts: _instance.contacts,
      employer: _instance.employer,
      customAddress: _instance.customAddress,
      parsedContacts: _instance.parsedContacts,
    ));
  }

  /// Update contacts field
  _NestedObjectsCopyWith contacts(List<Contact>? value) {
    return _NestedObjectsCopyWith._(NestedObjects(
      name: _instance.name,
      homeAddress: _instance.homeAddress,
      workAddress: _instance.workAddress,
      previousAddresses: _instance.previousAddresses,
      namedAddresses: _instance.namedAddresses,
      primaryContact: _instance.primaryContact,
      contacts: value,
      employer: _instance.employer,
      customAddress: _instance.customAddress,
      parsedContacts: _instance.parsedContacts,
    ));
  }

  /// Update employer field
  _NestedObjectsCopyWith employer(Company? value) {
    return _NestedObjectsCopyWith._(NestedObjects(
      name: _instance.name,
      homeAddress: _instance.homeAddress,
      workAddress: _instance.workAddress,
      previousAddresses: _instance.previousAddresses,
      namedAddresses: _instance.namedAddresses,
      primaryContact: _instance.primaryContact,
      contacts: _instance.contacts,
      employer: value,
      customAddress: _instance.customAddress,
      parsedContacts: _instance.parsedContacts,
    ));
  }

  /// Update customAddress field
  _NestedObjectsCopyWith customAddress(Address? value) {
    return _NestedObjectsCopyWith._(NestedObjects(
      name: _instance.name,
      homeAddress: _instance.homeAddress,
      workAddress: _instance.workAddress,
      previousAddresses: _instance.previousAddresses,
      namedAddresses: _instance.namedAddresses,
      primaryContact: _instance.primaryContact,
      contacts: _instance.contacts,
      employer: _instance.employer,
      customAddress: value,
      parsedContacts: _instance.parsedContacts,
    ));
  }

  /// Update parsedContacts field
  _NestedObjectsCopyWith parsedContacts(List<Contact>? value) {
    return _NestedObjectsCopyWith._(NestedObjects(
      name: _instance.name,
      homeAddress: _instance.homeAddress,
      workAddress: _instance.workAddress,
      previousAddresses: _instance.previousAddresses,
      namedAddresses: _instance.namedAddresses,
      primaryContact: _instance.primaryContact,
      contacts: _instance.contacts,
      employer: _instance.employer,
      customAddress: _instance.customAddress,
      parsedContacts: value,
    ));
  }

  /// Build the final instance
  NestedObjects build() {
    return _instance as NestedObjects;
  }

  /// Traditional copyWith method
  NestedObjects call({
    String? name,
    Address? homeAddress,
    Address? workAddress,
    List<Address>? previousAddresses,
    Map<String, Address>? namedAddresses,
    Contact? primaryContact,
    List<Contact>? contacts,
    Company? employer,
    Address? customAddress,
    List<Contact>? parsedContacts,
  }) {
    return NestedObjects(
      name: name ?? _instance.name,
      homeAddress: homeAddress ?? _instance.homeAddress,
      workAddress: workAddress ?? _instance.workAddress,
      previousAddresses: previousAddresses ?? _instance.previousAddresses,
      namedAddresses: namedAddresses ?? _instance.namedAddresses,
      primaryContact: primaryContact ?? _instance.primaryContact,
      contacts: contacts ?? _instance.contacts,
      employer: employer ?? _instance.employer,
      customAddress: customAddress ?? _instance.customAddress,
      parsedContacts: parsedContacts ?? _instance.parsedContacts,
    );
  }
}

