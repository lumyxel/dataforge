// Generated by data class generator
// DO NOT MODIFY BY HAND

part of 'alternate_names_test.model.dart';

mixin _AlternateNamesTest {
  abstract final String name;
  abstract final int age;
  abstract final String email;
  abstract final bool isActive;
  abstract final List<String> tags;

  _AlternateNamesTestCopyWith get copyWith =>
      _AlternateNamesTestCopyWith._(this as AlternateNamesTest);

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) return true;
    if (other is! AlternateNamesTest) return false;

    if (name != other.name) {
      return false;
    }
    if (age != other.age) {
      return false;
    }
    if (email != other.email) {
      return false;
    }
    if (isActive != other.isActive) {
      return false;
    }
    if (!DeepCollectionEquality().equals(tags, other.tags)) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    return Object.hashAll([
      name,
      age,
      email,
      isActive,
      DeepCollectionEquality().hash(tags),
    ]);
  }

  @override
  String toString() {
    return 'AlternateNamesTest(name: $name, age: $age, email: $email, isActive: $isActive, tags: $tags)';
  }

  Map<String, dynamic> toJson() {
    final map = <String, dynamic>{};
    map['name'] = name;
    map['user_age'] = age;
    map['email'] = email;
    map['is_active'] = isActive;
    map['tags'] = tags;
    return map;
  }

  static AlternateNamesTest fromJson(Map<String, dynamic> map) {
    return AlternateNamesTest(
      name: SafeCasteUtil.safeCast<String>(map['name']) ?? "",
      age: SafeCasteUtil.safeCast<int>(
              (map['user_age'] ?? map['age'] ?? map['years'])) ??
          0,
      email: SafeCasteUtil.safeCast<String>((map['email'] ??
              map['email_address'] ??
              map['mail'] ??
              map['e_mail'])) ??
          "",
      isActive: SafeCasteUtil.safeCast<bool>(
              (map['is_active'] ?? map['active'] ?? map['enabled'])) ??
          false,
      tags: ((map['tags'] as List<dynamic>?) ??
                  (map['tags_list'] as List<dynamic>?) ??
                  (map['labels'] as List<dynamic>?))
              ?.map((e) => e.toString())
              .toList() ??
          const [],
    );
  }
}

/// Helper class for chained copyWith operations
class _AlternateNamesTestCopyWith {
  final AlternateNamesTest _instance;
  const _AlternateNamesTestCopyWith._(this._instance);

  /// Update name field
  _AlternateNamesTestCopyWith name(String value) {
    return _AlternateNamesTestCopyWith._(AlternateNamesTest(
      name: value,
      age: _instance.age,
      email: _instance.email,
      isActive: _instance.isActive,
      tags: _instance.tags,
    ));
  }

  /// Update age field
  _AlternateNamesTestCopyWith age(int value) {
    return _AlternateNamesTestCopyWith._(AlternateNamesTest(
      name: _instance.name,
      age: value,
      email: _instance.email,
      isActive: _instance.isActive,
      tags: _instance.tags,
    ));
  }

  /// Update email field
  _AlternateNamesTestCopyWith email(String value) {
    return _AlternateNamesTestCopyWith._(AlternateNamesTest(
      name: _instance.name,
      age: _instance.age,
      email: value,
      isActive: _instance.isActive,
      tags: _instance.tags,
    ));
  }

  /// Update isActive field
  _AlternateNamesTestCopyWith isActive(bool value) {
    return _AlternateNamesTestCopyWith._(AlternateNamesTest(
      name: _instance.name,
      age: _instance.age,
      email: _instance.email,
      isActive: value,
      tags: _instance.tags,
    ));
  }

  /// Update tags field
  _AlternateNamesTestCopyWith tags(List<String> value) {
    return _AlternateNamesTestCopyWith._(AlternateNamesTest(
      name: _instance.name,
      age: _instance.age,
      email: _instance.email,
      isActive: _instance.isActive,
      tags: value,
    ));
  }

  /// Build the final instance
  AlternateNamesTest build() {
    return _instance;
  }

  /// Traditional copyWith method
  AlternateNamesTest call({
    String? name,
    int? age,
    String? email,
    bool? isActive,
    List<String>? tags,
  }) {
    return AlternateNamesTest(
      name: name ?? _instance.name,
      age: age ?? _instance.age,
      email: email ?? _instance.email,
      isActive: isActive ?? _instance.isActive,
      tags: tags ?? _instance.tags,
    );
  }
}
