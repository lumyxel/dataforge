// Generated by data class generator
// DO NOT MODIFY BY HAND

part of 'deep_nested_test.model.dart';

mixin _Employee {
  abstract final String name;
  abstract final int id;
  abstract final String position;

  _EmployeeCopyWith get copyWith => _EmployeeCopyWith._(this as Employee);

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) return true;
    if (other is! Employee) return false;

    if (name != other.name) {
      return false;
    }
    if (id != other.id) {
      return false;
    }
    if (position != other.position) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    return Object.hashAll([
      name,
      id,
      position,
    ]);
  }
  @override
  String toString() {
    return 'Employee(name: $name, id: $id, position: $position)';
  }


  Map<String, dynamic> toJson() {
    final map = <String, dynamic>{};
    map['name'] = name;
    map['id'] = id;
    map['position'] = position;
    return map;
  }

  static Employee fromJson(Map<String, dynamic> map) {
    return Employee(
      name: SafeCasteUtil.safeCast<String>(map['name']) ?? "",
      id: SafeCasteUtil.safeCast<int>(map['id']) ?? 0,
      position: SafeCasteUtil.safeCast<String>(map['position']) ?? "",
    );
  }
}

mixin _Team {
  abstract final String name;
  abstract final Employee leader;
  abstract final List<Employee> members;

  _TeamCopyWith get copyWith => _TeamCopyWith._(this as Team);

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) return true;
    if (other is! Team) return false;

    if (name != other.name) {
      return false;
    }
    if (leader != other.leader) {
      return false;
    }
    if (!DeepCollectionEquality().equals(members, other.members)) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    return Object.hashAll([
      name,
      leader,
      DeepCollectionEquality().hash(members),
    ]);
  }
  @override
  String toString() {
    return 'Team(name: $name, leader: $leader, members: $members)';
  }


  Map<String, dynamic> toJson() {
    final map = <String, dynamic>{};
    map['name'] = name;
    map['leader'] = leader;
    map['members'] = members;
    return map;
  }

  static Team fromJson(Map<String, dynamic> map) {
    return Team(
      name: SafeCasteUtil.safeCast<String>(map['name']) ?? "",
      leader: Employee.fromJson((map['leader'] ?? {}) as Map<String, dynamic>),
      members: (map['members'] as List<dynamic>?)?.map((e) => Employee.fromJson(e as Map<String, dynamic>)).toList()?.cast<Employee>() ?? [],
    );
  }
}

mixin _Department {
  abstract final String name;
  abstract final String code;
  abstract final List<Team> teams;

  _DepartmentCopyWith get copyWith => _DepartmentCopyWith._(this as Department);

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) return true;
    if (other is! Department) return false;

    if (name != other.name) {
      return false;
    }
    if (code != other.code) {
      return false;
    }
    if (!DeepCollectionEquality().equals(teams, other.teams)) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    return Object.hashAll([
      name,
      code,
      DeepCollectionEquality().hash(teams),
    ]);
  }
  @override
  String toString() {
    return 'Department(name: $name, code: $code, teams: $teams)';
  }


  Map<String, dynamic> toJson() {
    final map = <String, dynamic>{};
    map['name'] = name;
    map['code'] = code;
    map['teams'] = teams;
    return map;
  }

  static Department fromJson(Map<String, dynamic> map) {
    return Department(
      name: SafeCasteUtil.safeCast<String>(map['name']) ?? "",
      code: SafeCasteUtil.safeCast<String>(map['code']) ?? "",
      teams: (map['teams'] as List<dynamic>?)?.map((e) => Team.fromJson(e as Map<String, dynamic>)).toList()?.cast<Team>() ?? [],
    );
  }
}

mixin _Company {
  abstract final String name;
  abstract final String address;
  abstract final List<Department> departments;

  _CompanyCopyWith get copyWith => _CompanyCopyWith._(this as Company);

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) return true;
    if (other is! Company) return false;

    if (name != other.name) {
      return false;
    }
    if (address != other.address) {
      return false;
    }
    if (!DeepCollectionEquality().equals(departments, other.departments)) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    return Object.hashAll([
      name,
      address,
      DeepCollectionEquality().hash(departments),
    ]);
  }
  @override
  String toString() {
    return 'Company(name: $name, address: $address, departments: $departments)';
  }


  Map<String, dynamic> toJson() {
    final map = <String, dynamic>{};
    map['name'] = name;
    map['address'] = address;
    map['departments'] = departments;
    return map;
  }

  static Company fromJson(Map<String, dynamic> map) {
    return Company(
      name: SafeCasteUtil.safeCast<String>(map['name']) ?? "",
      address: SafeCasteUtil.safeCast<String>(map['address']) ?? "",
      departments: (map['departments'] as List<dynamic>?)?.map((e) => Department.fromJson(e as Map<String, dynamic>)).toList()?.cast<Department>() ?? [],
    );
  }
}


/// Helper class for chained copyWith operations
class _EmployeeCopyWith {
  final Employee _instance;
  const _EmployeeCopyWith._(this._instance);

  /// Update name field
  _EmployeeCopyWith name(String value) {
    return _EmployeeCopyWith._(Employee(
      name: value,
      id: _instance.id,
      position: _instance.position,
    ));
  }

  /// Update id field
  _EmployeeCopyWith id(int value) {
    return _EmployeeCopyWith._(Employee(
      name: _instance.name,
      id: value,
      position: _instance.position,
    ));
  }

  /// Update position field
  _EmployeeCopyWith position(String value) {
    return _EmployeeCopyWith._(Employee(
      name: _instance.name,
      id: _instance.id,
      position: value,
    ));
  }

  /// Build the final instance
  Employee build() {
    return _instance as Employee;
  }

  /// Traditional copyWith method
  Employee call({
    String? name,
    int? id,
    String? position,
  }) {
    return Employee(
      name: name ?? _instance.name,
      id: id ?? _instance.id,
      position: position ?? _instance.position,
    );
  }
}


/// Helper class for chained copyWith operations
class _TeamCopyWith {
  final Team _instance;
  const _TeamCopyWith._(this._instance);

  /// Update name field
  _TeamCopyWith name(String value) {
    return _TeamCopyWith._(Team(
      name: value,
      leader: _instance.leader,
      members: _instance.members,
    ));
  }

  /// Update leader field
  _TeamCopyWith leader(Employee value) {
    return _TeamCopyWith._(Team(
      name: _instance.name,
      leader: value,
      members: _instance.members,
    ));
  }

  /// Update members field
  _TeamCopyWith members(List<Employee> value) {
    return _TeamCopyWith._(Team(
      name: _instance.name,
      leader: _instance.leader,
      members: value,
    ));
  }

  /// Build the final instance
  Team build() {
    return _instance as Team;
  }

  /// Traditional copyWith method
  Team call({
    String? name,
    Employee? leader,
    List<Employee>? members,
  }) {
    return Team(
      name: name ?? _instance.name,
      leader: leader ?? _instance.leader,
      members: members ?? _instance.members,
    );
  }
}


/// Helper class for chained copyWith operations
class _DepartmentCopyWith {
  final Department _instance;
  const _DepartmentCopyWith._(this._instance);

  /// Update name field
  _DepartmentCopyWith name(String value) {
    return _DepartmentCopyWith._(Department(
      name: value,
      code: _instance.code,
      teams: _instance.teams,
    ));
  }

  /// Update code field
  _DepartmentCopyWith code(String value) {
    return _DepartmentCopyWith._(Department(
      name: _instance.name,
      code: value,
      teams: _instance.teams,
    ));
  }

  /// Update teams field
  _DepartmentCopyWith teams(List<Team> value) {
    return _DepartmentCopyWith._(Department(
      name: _instance.name,
      code: _instance.code,
      teams: value,
    ));
  }

  /// Build the final instance
  Department build() {
    return _instance as Department;
  }

  /// Traditional copyWith method
  Department call({
    String? name,
    String? code,
    List<Team>? teams,
  }) {
    return Department(
      name: name ?? _instance.name,
      code: code ?? _instance.code,
      teams: teams ?? _instance.teams,
    );
  }
}


/// Helper class for chained copyWith operations
class _CompanyCopyWith {
  final Company _instance;
  const _CompanyCopyWith._(this._instance);

  /// Update name field
  _CompanyCopyWith name(String value) {
    return _CompanyCopyWith._(Company(
      name: value,
      address: _instance.address,
      departments: _instance.departments,
    ));
  }

  /// Update address field
  _CompanyCopyWith address(String value) {
    return _CompanyCopyWith._(Company(
      name: _instance.name,
      address: value,
      departments: _instance.departments,
    ));
  }

  /// Update departments field
  _CompanyCopyWith departments(List<Department> value) {
    return _CompanyCopyWith._(Company(
      name: _instance.name,
      address: _instance.address,
      departments: value,
    ));
  }

  /// Build the final instance
  Company build() {
    return _instance as Company;
  }

  /// Traditional copyWith method
  Company call({
    String? name,
    String? address,
    List<Department>? departments,
  }) {
    return Company(
      name: name ?? _instance.name,
      address: address ?? _instance.address,
      departments: departments ?? _instance.departments,
    );
  }
}

