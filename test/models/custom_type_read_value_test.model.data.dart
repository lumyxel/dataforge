// Generated by data class generator
// DO NOT MODIFY BY HAND

part of 'custom_type_read_value_test.model.dart';

mixin _CustomTypeReadValueTest {
  abstract final TradeInfoBean? tradeInfo;
  abstract final UserInfo userInfo;

  _CustomTypeReadValueTestCopyWith get copyWith =>
      _CustomTypeReadValueTestCopyWith._(this);

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) return true;
    if (other is! CustomTypeReadValueTest) return false;

    if (tradeInfo != other.tradeInfo) {
      return false;
    }
    if (userInfo != other.userInfo) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    return Object.hashAll([
      tradeInfo,
      userInfo,
    ]);
  }

  @override
  String toString() {
    return 'CustomTypeReadValueTest(tradeInfo: $tradeInfo, userInfo: $userInfo)';
  }

  Map<String, dynamic> toJson() {
    final map = <String, dynamic>{};
    if (tradeInfo != null) {
      map['tradeInfo'] = tradeInfo;
    }
    map['userInfo'] = userInfo;
    return map;
  }

  static CustomTypeReadValueTest fromJson(Map<String, dynamic> map) {
    final tradeInfoReadValue =
        CustomTypeReadValueTest._readTradeInfo(map, 'tradeInfo');
    final userInfoReadValue =
        CustomTypeReadValueTest._readUserInfo(map, 'userInfo');
    return CustomTypeReadValueTest(
      tradeInfo: tradeInfoReadValue != null
          ? TradeInfoBean.fromJson(
              Map<String, dynamic>.from(tradeInfoReadValue as Map))
          : null,
      userInfo: UserInfo.fromJson(
          Map<String, dynamic>.from((userInfoReadValue ?? {}) as Map)),
    );
  }
}

mixin _TradeInfoBean {
  abstract final String status;
  abstract final double price;

  _TradeInfoBeanCopyWith get copyWith => _TradeInfoBeanCopyWith._(this);

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) return true;
    if (other is! TradeInfoBean) return false;

    if (status != other.status) {
      return false;
    }
    if (price != other.price) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    return Object.hashAll([
      status,
      price,
    ]);
  }

  @override
  String toString() {
    return 'TradeInfoBean(status: $status, price: $price)';
  }

  Map<String, dynamic> toJson() {
    final map = <String, dynamic>{};
    map['status'] = status;
    map['price'] = price;
    return map;
  }

  static TradeInfoBean fromJson(Map<String, dynamic> map) {
    return TradeInfoBean(
      status: SafeCasteUtil.safeCast<String>(map['status']) ?? "",
      price: SafeCasteUtil.safeCast<double>(map['price']) ?? 0.0,
    );
  }
}

mixin _UserInfo {
  abstract final String name;
  abstract final int age;

  _UserInfoCopyWith get copyWith => _UserInfoCopyWith._(this);

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) return true;
    if (other is! UserInfo) return false;

    if (name != other.name) {
      return false;
    }
    if (age != other.age) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    return Object.hashAll([
      name,
      age,
    ]);
  }

  @override
  String toString() {
    return 'UserInfo(name: $name, age: $age)';
  }

  Map<String, dynamic> toJson() {
    final map = <String, dynamic>{};
    map['name'] = name;
    map['age'] = age;
    return map;
  }

  static UserInfo fromJson(Map<String, dynamic> map) {
    return UserInfo(
      name: SafeCasteUtil.safeCast<String>(map['name']) ?? "",
      age: SafeCasteUtil.safeCast<int>(map['age']) ?? 0,
    );
  }
}

/// Helper class for chained copyWith operations
class _CustomTypeReadValueTestCopyWith {
  final _CustomTypeReadValueTest _instance;
  const _CustomTypeReadValueTestCopyWith._(this._instance);

  /// Update tradeInfo field
  CustomTypeReadValueTest tradeInfo(TradeInfoBean? value) {
    return CustomTypeReadValueTest(
      tradeInfo: value,
      userInfo: _instance.userInfo,
    );
  }

  /// Update userInfo field
  CustomTypeReadValueTest userInfo(UserInfo? value) {
    return CustomTypeReadValueTest(
      tradeInfo: _instance.tradeInfo,
      userInfo: value ?? _instance.userInfo,
    );
  }

  /// Nested copyWith for tradeInfo field
  _CustomTypeReadValueTestNestedCopyWithTradeInfo get tradeInfoBuilder {
    return _CustomTypeReadValueTestNestedCopyWithTradeInfo._(_instance);
  }

  /// Nested copyWith for userInfo field
  _CustomTypeReadValueTestNestedCopyWithUserInfo get userInfoBuilder {
    return _CustomTypeReadValueTestNestedCopyWithUserInfo._(_instance);
  }

  /// Traditional copyWith method
  CustomTypeReadValueTest call({
    TradeInfoBean? tradeInfo,
    UserInfo? userInfo,
  }) {
    return CustomTypeReadValueTest(
      tradeInfo: tradeInfo ?? _instance.tradeInfo,
      userInfo: userInfo ?? _instance.userInfo,
    );
  }
}

/// Nested copyWith helper class for tradeInfo field
class _CustomTypeReadValueTestNestedCopyWithTradeInfo {
  final _CustomTypeReadValueTest _instance;
  const _CustomTypeReadValueTestNestedCopyWithTradeInfo._(this._instance);

  /// Update tradeInfo field using a copyWith function
  CustomTypeReadValueTest call(TradeInfoBean Function(TradeInfoBean) updater) {
    final currentValue = _instance.tradeInfo;
    if (currentValue == null) return _instance as CustomTypeReadValueTest;
    final updatedValue = updater(currentValue);
    return CustomTypeReadValueTest(
      tradeInfo: updatedValue,
      userInfo: _instance.userInfo,
    );
  }
}

/// Nested copyWith helper class for userInfo field
class _CustomTypeReadValueTestNestedCopyWithUserInfo {
  final _CustomTypeReadValueTest _instance;
  const _CustomTypeReadValueTestNestedCopyWithUserInfo._(this._instance);

  /// Update userInfo field using a copyWith function
  CustomTypeReadValueTest call(UserInfo Function(UserInfo) updater) {
    final currentValue = _instance.userInfo;
    final updatedValue = updater(currentValue);
    return CustomTypeReadValueTest(
      tradeInfo: _instance.tradeInfo,
      userInfo: updatedValue,
    );
  }
}

/// Helper class for chained copyWith operations
class _TradeInfoBeanCopyWith {
  final _TradeInfoBean _instance;
  const _TradeInfoBeanCopyWith._(this._instance);

  /// Update status field
  TradeInfoBean status(String? value) {
    return TradeInfoBean(
      status: value ?? _instance.status,
      price: _instance.price,
    );
  }

  /// Update price field
  TradeInfoBean price(double? value) {
    return TradeInfoBean(
      status: _instance.status,
      price: value ?? _instance.price,
    );
  }

  /// Traditional copyWith method
  TradeInfoBean call({
    String? status,
    double? price,
  }) {
    return TradeInfoBean(
      status: status ?? _instance.status,
      price: price ?? _instance.price,
    );
  }
}

/// Helper class for chained copyWith operations
class _UserInfoCopyWith {
  final _UserInfo _instance;
  const _UserInfoCopyWith._(this._instance);

  /// Update name field
  UserInfo name(String? value) {
    return UserInfo(
      name: value ?? _instance.name,
      age: _instance.age,
    );
  }

  /// Update age field
  UserInfo age(int? value) {
    return UserInfo(
      name: _instance.name,
      age: value ?? _instance.age,
    );
  }

  /// Traditional copyWith method
  UserInfo call({
    String? name,
    int? age,
  }) {
    return UserInfo(
      name: name ?? _instance.name,
      age: age ?? _instance.age,
    );
  }
}
