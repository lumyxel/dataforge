// Generated by data class generator
// DO NOT MODIFY BY HAND

part of 'test_model.model.dart';

mixin _TestModel {
  abstract final String name;
  abstract final Params? param;

  _TestModelCopyWith get copyWith => _TestModelCopyWith._(this);

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) return true;
    if (other is! TestModel) return false;

    if (name != other.name) {
      return false;
    }
    if (param != other.param) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    return Object.hashAll([
      name,
      param,
    ]);
  }

  @override
  String toString() {
    return 'TestModel(name: $name, param: $param)';
  }

  Map<String, dynamic> toJson() {
    final map = <String, dynamic>{};
    map['name'] = name;
    if (param != null) {
      map['param'] = param;
    }
    return map;
  }

  static TestModel fromJson(Map<String, dynamic> map) {
    return TestModel(
      name: SafeCasteUtil.safeCast<String>(map['name']) ?? "",
      param: map['param'] != null
          ? Params.fromJson(map['param'] as Map<String, dynamic>)
          : null,
    );
  }
}

mixin _Params {
  abstract final String value;

  _ParamsCopyWith get copyWith => _ParamsCopyWith._(this);

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) return true;
    if (other is! Params) return false;

    if (value != other.value) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    return Object.hashAll([
      value,
    ]);
  }

  @override
  String toString() {
    return 'Params(value: $value)';
  }

  Map<String, dynamic> toJson() {
    final map = <String, dynamic>{};
    map['value'] = value;
    return map;
  }

  static Params fromJson(Map<String, dynamic> map) {
    return Params(
      value: SafeCasteUtil.safeCast<String>(map['value']) ?? "",
    );
  }
}

/// Helper class for chained copyWith operations
class _TestModelCopyWith {
  final _TestModel _instance;
  const _TestModelCopyWith._(this._instance);

  /// Update name field
  TestModel name(String? value) {
    return TestModel(
      name: value ?? _instance.name,
      param: _instance.param,
    );
  }

  /// Update param field
  TestModel param(Params? value) {
    return TestModel(
      name: _instance.name,
      param: value,
    );
  }

  /// Nested copyWith for param field
  _TestModelNestedCopyWithParam get paramBuilder {
    return _TestModelNestedCopyWithParam._(_instance);
  }

  /// Traditional copyWith method
  TestModel call({
    String? name,
    Params? param,
  }) {
    return TestModel(
      name: name ?? _instance.name,
      param: param ?? _instance.param,
    );
  }
}

/// Nested copyWith helper class for param field
class _TestModelNestedCopyWithParam {
  final _TestModel _instance;
  const _TestModelNestedCopyWithParam._(this._instance);

  /// Update param field using a copyWith function
  TestModel call(Params Function(Params) updater) {
    final currentValue = _instance.param;
    if (currentValue == null) return _instance as TestModel;
    final updatedValue = updater(currentValue);
    return TestModel(
      name: _instance.name,
      param: updatedValue,
    );
  }
}

/// Helper class for chained copyWith operations
class _ParamsCopyWith {
  final _Params _instance;
  const _ParamsCopyWith._(this._instance);

  /// Update value field
  Params value(String? value) {
    return Params(
      value: value ?? _instance.value,
    );
  }

  /// Traditional copyWith method
  Params call({
    String? value,
  }) {
    return Params(
      value: value ?? _instance.value,
    );
  }
}
