// Generated by data class generator
// DO NOT MODIFY BY HAND

part of 'json_key_functions_test.model.dart';

mixin _JsonKeyFunctionsTest {
  abstract final String name;
  abstract final List<String> items;
  abstract final int count;
  abstract final String? optionalValue;
  abstract final String regularField;

  _JsonKeyFunctionsTestCopyWith get copyWith =>
      _JsonKeyFunctionsTestCopyWith._(this as JsonKeyFunctionsTest);

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) return true;
    if (other is! JsonKeyFunctionsTest) return false;

    if (name != other.name) {
      return false;
    }
    if (!DeepCollectionEquality().equals(items, other.items)) {
      return false;
    }
    if (count != other.count) {
      return false;
    }
    if (optionalValue != other.optionalValue) {
      return false;
    }
    if (regularField != other.regularField) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    return Object.hashAll([
      name,
      DeepCollectionEquality().hash(items),
      count,
      optionalValue,
      regularField,
    ]);
  }

  @override
  String toString() {
    return 'JsonKeyFunctionsTest(name: $name, items: $items, count: $count, optionalValue: $optionalValue, regularField: $regularField)';
  }

  Map<String, dynamic> toJson() {
    final map = <String, dynamic>{};
    map['custom_name'] = customStringToJson(name);
    map['custom_list'] = customListToJson(items);
    map['custom_count'] = customIntToJson(count);
    if (optionalValue != null) {
      map['optional_value'] =
          optionalValue != null ? customStringToJson(optionalValue!) : null;
    }
    map['regularField'] = regularField;
    return map;
  }

  static JsonKeyFunctionsTest fromJson(Map<String, dynamic> map) {
    return JsonKeyFunctionsTest(
      name: customStringFromJson(map['custom_name'] ?? {}),
      items: customListFromJson(map['custom_list'] ?? {}),
      count: customIntFromJson(map['custom_count'] ?? {}),
      optionalValue: map['optional_value'] != null
          ? customStringFromJson(map['optional_value'])
          : null,
      regularField: SafeCasteUtil.safeCast<String>(map['regularField']) ?? "",
    );
  }
}

/// Helper class for chained copyWith operations
class _JsonKeyFunctionsTestCopyWith {
  final JsonKeyFunctionsTest _instance;
  const _JsonKeyFunctionsTestCopyWith._(this._instance);

  /// Update name field
  _JsonKeyFunctionsTestCopyWith name(String value) {
    return _JsonKeyFunctionsTestCopyWith._(JsonKeyFunctionsTest(
      name: value,
      items: _instance.items,
      count: _instance.count,
      optionalValue: _instance.optionalValue,
      regularField: _instance.regularField,
    ));
  }

  /// Update items field
  _JsonKeyFunctionsTestCopyWith items(List<String> value) {
    return _JsonKeyFunctionsTestCopyWith._(JsonKeyFunctionsTest(
      name: _instance.name,
      items: value,
      count: _instance.count,
      optionalValue: _instance.optionalValue,
      regularField: _instance.regularField,
    ));
  }

  /// Update count field
  _JsonKeyFunctionsTestCopyWith count(int value) {
    return _JsonKeyFunctionsTestCopyWith._(JsonKeyFunctionsTest(
      name: _instance.name,
      items: _instance.items,
      count: value,
      optionalValue: _instance.optionalValue,
      regularField: _instance.regularField,
    ));
  }

  /// Update optionalValue field
  _JsonKeyFunctionsTestCopyWith optionalValue(String? value) {
    return _JsonKeyFunctionsTestCopyWith._(JsonKeyFunctionsTest(
      name: _instance.name,
      items: _instance.items,
      count: _instance.count,
      optionalValue: value,
      regularField: _instance.regularField,
    ));
  }

  /// Update regularField field
  _JsonKeyFunctionsTestCopyWith regularField(String value) {
    return _JsonKeyFunctionsTestCopyWith._(JsonKeyFunctionsTest(
      name: _instance.name,
      items: _instance.items,
      count: _instance.count,
      optionalValue: _instance.optionalValue,
      regularField: value,
    ));
  }

  /// Build the final instance
  JsonKeyFunctionsTest build() {
    return _instance;
  }

  /// Traditional copyWith method
  JsonKeyFunctionsTest call({
    String? name,
    List<String>? items,
    int? count,
    String? optionalValue,
    String? regularField,
  }) {
    return JsonKeyFunctionsTest(
      name: name ?? _instance.name,
      items: items ?? _instance.items,
      count: count ?? _instance.count,
      optionalValue: optionalValue ?? _instance.optionalValue,
      regularField: regularField ?? _instance.regularField,
    );
  }
}
