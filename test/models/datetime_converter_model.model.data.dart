// Generated by data class generator
// DO NOT MODIFY BY HAND

part of 'datetime_converter_model.model.dart';

mixin _DateTimeModel {
  abstract final DateTime? timestamp;
  abstract final DateTime? millisTimestamp;
  abstract final DateTime? secondsTimestamp;
  abstract final DateTime? isoDate;

  _DateTimeModelCopyWith get copyWith => _DateTimeModelCopyWith._(this);

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) return true;
    if (other is! DateTimeModel) return false;

    if (timestamp != other.timestamp) {
      return false;
    }
    if (millisTimestamp != other.millisTimestamp) {
      return false;
    }
    if (secondsTimestamp != other.secondsTimestamp) {
      return false;
    }
    if (isoDate != other.isoDate) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    return Object.hashAll([
      timestamp,
      millisTimestamp,
      secondsTimestamp,
      isoDate,
    ]);
  }

  @override
  String toString() {
    return 'DateTimeModel(timestamp: $timestamp, millisTimestamp: $millisTimestamp, secondsTimestamp: $secondsTimestamp, isoDate: $isoDate)';
  }

  Map<String, dynamic> toJson() {
    final map = <String, dynamic>{};
    if (timestamp != null) {
      map['timestamp'] = timestamp != null
          ? const DefaultDateTimeConverter().toJson(timestamp!)
          : null;
    }
    if (millisTimestamp != null) {
      map['millisTimestamp'] = millisTimestamp != null
          ? const DefaultDateTimeConverter().toJson(millisTimestamp!)
          : null;
    }
    if (secondsTimestamp != null) {
      map['secondsTimestamp'] = secondsTimestamp != null
          ? const DefaultDateTimeConverter().toJson(secondsTimestamp!)
          : null;
    }
    if (isoDate != null) {
      map['isoDate'] = isoDate != null
          ? const DefaultDateTimeConverter().toJson(isoDate!)
          : null;
    }
    return map;
  }

  static DateTimeModel fromJson(Map<String, dynamic> map) {
    return DateTimeModel(
      timestamp: map['timestamp'] != null
          ? const DefaultDateTimeConverter().fromJson(map['timestamp'])
          : null,
      millisTimestamp: map['millisTimestamp'] != null
          ? const DefaultDateTimeConverter().fromJson(map['millisTimestamp'])
          : null,
      secondsTimestamp: map['secondsTimestamp'] != null
          ? const DefaultDateTimeConverter().fromJson(map['secondsTimestamp'])
          : null,
      isoDate: map['isoDate'] != null
          ? const DefaultDateTimeConverter().fromJson(map['isoDate'])
          : null,
    );
  }
}

/// Helper class for chained copyWith operations
class _DateTimeModelCopyWith {
  final _DateTimeModel _instance;
  const _DateTimeModelCopyWith._(this._instance);

  /// Update timestamp field
  DateTimeModel timestamp(DateTime? value) {
    return DateTimeModel(
      timestamp: value,
      millisTimestamp: _instance.millisTimestamp,
      secondsTimestamp: _instance.secondsTimestamp,
      isoDate: _instance.isoDate,
    );
  }

  /// Update millisTimestamp field
  DateTimeModel millisTimestamp(DateTime? value) {
    return DateTimeModel(
      timestamp: _instance.timestamp,
      millisTimestamp: value,
      secondsTimestamp: _instance.secondsTimestamp,
      isoDate: _instance.isoDate,
    );
  }

  /// Update secondsTimestamp field
  DateTimeModel secondsTimestamp(DateTime? value) {
    return DateTimeModel(
      timestamp: _instance.timestamp,
      millisTimestamp: _instance.millisTimestamp,
      secondsTimestamp: value,
      isoDate: _instance.isoDate,
    );
  }

  /// Update isoDate field
  DateTimeModel isoDate(DateTime? value) {
    return DateTimeModel(
      timestamp: _instance.timestamp,
      millisTimestamp: _instance.millisTimestamp,
      secondsTimestamp: _instance.secondsTimestamp,
      isoDate: value,
    );
  }

  /// Traditional copyWith method
  DateTimeModel call({
    DateTime? timestamp,
    DateTime? millisTimestamp,
    DateTime? secondsTimestamp,
    DateTime? isoDate,
  }) {
    return DateTimeModel(
      timestamp: timestamp ?? _instance.timestamp,
      millisTimestamp: millisTimestamp ?? _instance.millisTimestamp,
      secondsTimestamp: secondsTimestamp ?? _instance.secondsTimestamp,
      isoDate: isoDate ?? _instance.isoDate,
    );
  }
}
