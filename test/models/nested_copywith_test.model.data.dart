// Generated by data class generator
// DO NOT MODIFY BY HAND

part of 'nested_copywith_test.model.dart';

mixin _Address {
  abstract final String street;
  abstract final String city;
  abstract final String? zipCode;

  _AddressCopyWith get copyWith => _AddressCopyWith._(this as Address);

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) return true;
    if (other is! Address) return false;

    if (street != other.street) {
      return false;
    }
    if (city != other.city) {
      return false;
    }
    if (zipCode != other.zipCode) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    return Object.hashAll([
      street,
      city,
      zipCode,
    ]);
  }
  @override
  String toString() {
    return 'Address(street: $street, city: $city, zipCode: $zipCode)';
  }


  Map<String, dynamic> toJson() {
    final map = <String, dynamic>{};
    map['street'] = street;
    map['city'] = city;
    if (zipCode != null) {
      map['zipCode'] = zipCode;
    }
    return map;
  }

  static Address fromJson(Map<String, dynamic> map) {
    return Address(
      street: SafeCasteUtil.safeCast<String>(map['street']) ?? "",
      city: SafeCasteUtil.safeCast<String>(map['city']) ?? "",
      zipCode: SafeCasteUtil.safeCast<String>(map['zipCode']),
    );
  }
}

mixin _Person {
  abstract final String name;
  abstract final int age;
  abstract final Address address;
  abstract final Address? workAddress;

  _PersonCopyWith get copyWith => _PersonCopyWith._(this as Person);

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) return true;
    if (other is! Person) return false;

    if (name != other.name) {
      return false;
    }
    if (age != other.age) {
      return false;
    }
    if (address != other.address) {
      return false;
    }
    if (workAddress != other.workAddress) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    return Object.hashAll([
      name,
      age,
      address,
      workAddress,
    ]);
  }
  @override
  String toString() {
    return 'Person(name: $name, age: $age, address: $address, workAddress: $workAddress)';
  }


  Map<String, dynamic> toJson() {
    final map = <String, dynamic>{};
    map['name'] = name;
    map['age'] = age;
    map['address'] = address;
    if (workAddress != null) {
      map['workAddress'] = workAddress;
    }
    return map;
  }

  static Person fromJson(Map<String, dynamic> map) {
    return Person(
      name: SafeCasteUtil.safeCast<String>(map['name']) ?? "",
      age: SafeCasteUtil.safeCast<int>(map['age']) ?? 0,
      address: Address.fromJson((map['address'] ?? {}) as Map<String, dynamic>),
      workAddress: map['workAddress'] != null ? Address.fromJson(map['workAddress'] as Map<String, dynamic>) : null,
    );
  }
}

mixin _Company {
  abstract final String name;
  abstract final Person ceo;
  abstract final List<Person> employees;

  _CompanyCopyWith get copyWith => _CompanyCopyWith._(this as Company);

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) return true;
    if (other is! Company) return false;

    if (name != other.name) {
      return false;
    }
    if (ceo != other.ceo) {
      return false;
    }
    if (!DeepCollectionEquality().equals(employees, other.employees)) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    return Object.hashAll([
      name,
      ceo,
      DeepCollectionEquality().hash(employees),
    ]);
  }
  @override
  String toString() {
    return 'Company(name: $name, ceo: $ceo, employees: $employees)';
  }


  Map<String, dynamic> toJson() {
    final map = <String, dynamic>{};
    map['name'] = name;
    map['ceo'] = ceo;
    map['employees'] = employees;
    return map;
  }

  static Company fromJson(Map<String, dynamic> map) {
    return Company(
      name: SafeCasteUtil.safeCast<String>(map['name']) ?? "",
      ceo: Person.fromJson((map['ceo'] ?? {}) as Map<String, dynamic>),
      employees: (map['employees'] as List<dynamic>?)?.map((e) => Person.fromJson(e as Map<String, dynamic>)).toList()?.cast<Person>() ?? [],
    );
  }
}

mixin _Department {
  abstract final String name;
  abstract final Person manager;
  abstract final Company parentCompany;
  abstract final Address? location;

  _DepartmentCopyWith get copyWith => _DepartmentCopyWith._(this as Department);

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) return true;
    if (other is! Department) return false;

    if (name != other.name) {
      return false;
    }
    if (manager != other.manager) {
      return false;
    }
    if (parentCompany != other.parentCompany) {
      return false;
    }
    if (location != other.location) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    return Object.hashAll([
      name,
      manager,
      parentCompany,
      location,
    ]);
  }
  @override
  String toString() {
    return 'Department(name: $name, manager: $manager, parentCompany: $parentCompany, location: $location)';
  }


  Map<String, dynamic> toJson() {
    final map = <String, dynamic>{};
    map['name'] = name;
    map['manager'] = manager;
    map['parentCompany'] = parentCompany;
    if (location != null) {
      map['location'] = location;
    }
    return map;
  }

  static Department fromJson(Map<String, dynamic> map) {
    return Department(
      name: SafeCasteUtil.safeCast<String>(map['name']) ?? "",
      manager: Person.fromJson((map['manager'] ?? {}) as Map<String, dynamic>),
      parentCompany: Company.fromJson((map['parentCompany'] ?? {}) as Map<String, dynamic>),
      location: map['location'] != null ? Address.fromJson(map['location'] as Map<String, dynamic>) : null,
    );
  }
}

mixin _Organization {
  abstract final String name;
  abstract final Address headquarters;
  abstract final List<Department> departments;
  abstract final Person founder;
  abstract final Company? parentCompany;

  _OrganizationCopyWith get copyWith => _OrganizationCopyWith._(this as Organization);

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) return true;
    if (other is! Organization) return false;

    if (name != other.name) {
      return false;
    }
    if (headquarters != other.headquarters) {
      return false;
    }
    if (!DeepCollectionEquality().equals(departments, other.departments)) {
      return false;
    }
    if (founder != other.founder) {
      return false;
    }
    if (parentCompany != other.parentCompany) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    return Object.hashAll([
      name,
      headquarters,
      DeepCollectionEquality().hash(departments),
      founder,
      parentCompany,
    ]);
  }
  @override
  String toString() {
    return 'Organization(name: $name, headquarters: $headquarters, departments: $departments, founder: $founder, parentCompany: $parentCompany)';
  }


  Map<String, dynamic> toJson() {
    final map = <String, dynamic>{};
    map['name'] = name;
    map['headquarters'] = headquarters;
    map['departments'] = departments;
    map['founder'] = founder;
    if (parentCompany != null) {
      map['parentCompany'] = parentCompany;
    }
    return map;
  }

  static Organization fromJson(Map<String, dynamic> map) {
    return Organization(
      name: SafeCasteUtil.safeCast<String>(map['name']) ?? "",
      headquarters: Address.fromJson((map['headquarters'] ?? {}) as Map<String, dynamic>),
      departments: (map['departments'] as List<dynamic>?)?.map((e) => Department.fromJson(e as Map<String, dynamic>)).toList()?.cast<Department>() ?? [],
      founder: Person.fromJson((map['founder'] ?? {}) as Map<String, dynamic>),
      parentCompany: map['parentCompany'] != null ? Company.fromJson(map['parentCompany'] as Map<String, dynamic>) : null,
    );
  }
}

mixin _CorporateGroup {
  abstract final String name;
  abstract final Organization mainOrganization;
  abstract final List<Organization> subsidiaries;
  abstract final Person chairman;
  abstract final Address? registeredAddress;

  _CorporateGroupCopyWith get copyWith => _CorporateGroupCopyWith._(this as CorporateGroup);

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) return true;
    if (other is! CorporateGroup) return false;

    if (name != other.name) {
      return false;
    }
    if (mainOrganization != other.mainOrganization) {
      return false;
    }
    if (!DeepCollectionEquality().equals(subsidiaries, other.subsidiaries)) {
      return false;
    }
    if (chairman != other.chairman) {
      return false;
    }
    if (registeredAddress != other.registeredAddress) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    return Object.hashAll([
      name,
      mainOrganization,
      DeepCollectionEquality().hash(subsidiaries),
      chairman,
      registeredAddress,
    ]);
  }
  @override
  String toString() {
    return 'CorporateGroup(name: $name, mainOrganization: $mainOrganization, subsidiaries: $subsidiaries, chairman: $chairman, registeredAddress: $registeredAddress)';
  }


  Map<String, dynamic> toJson() {
    final map = <String, dynamic>{};
    map['name'] = name;
    map['mainOrganization'] = mainOrganization;
    map['subsidiaries'] = subsidiaries;
    map['chairman'] = chairman;
    if (registeredAddress != null) {
      map['registeredAddress'] = registeredAddress;
    }
    return map;
  }

  static CorporateGroup fromJson(Map<String, dynamic> map) {
    return CorporateGroup(
      name: SafeCasteUtil.safeCast<String>(map['name']) ?? "",
      mainOrganization: Organization.fromJson((map['mainOrganization'] ?? {}) as Map<String, dynamic>),
      subsidiaries: (map['subsidiaries'] as List<dynamic>?)?.map((e) => Organization.fromJson(e as Map<String, dynamic>)).toList()?.cast<Organization>() ?? [],
      chairman: Person.fromJson((map['chairman'] ?? {}) as Map<String, dynamic>),
      registeredAddress: map['registeredAddress'] != null ? Address.fromJson(map['registeredAddress'] as Map<String, dynamic>) : null,
    );
  }
}


/// Helper class for chained copyWith operations
class _AddressCopyWith {
  final Address _instance;
  const _AddressCopyWith._(this._instance);

  /// Update street field
  _AddressCopyWith street(String value) {
    return _AddressCopyWith._(Address(
      street: value,
      city: _instance.city,
      zipCode: _instance.zipCode,
    ));
  }

  /// Update city field
  _AddressCopyWith city(String value) {
    return _AddressCopyWith._(Address(
      street: _instance.street,
      city: value,
      zipCode: _instance.zipCode,
    ));
  }

  /// Update zipCode field
  _AddressCopyWith zipCode(String? value) {
    return _AddressCopyWith._(Address(
      street: _instance.street,
      city: _instance.city,
      zipCode: value,
    ));
  }

  /// Build the final instance
  Address build() {
    return _instance as Address;
  }

  /// Traditional copyWith method
  Address call({
    String? street,
    String? city,
    String? zipCode,
  }) {
    return Address(
      street: street ?? _instance.street,
      city: city ?? _instance.city,
      zipCode: zipCode ?? _instance.zipCode,
    );
  }
}


/// Helper class for chained copyWith operations
class _PersonCopyWith {
  final Person _instance;
  const _PersonCopyWith._(this._instance);

  /// Update name field
  _PersonCopyWith name(String value) {
    return _PersonCopyWith._(Person(
      name: value,
      age: _instance.age,
      address: _instance.address,
      workAddress: _instance.workAddress,
    ));
  }

  /// Update age field
  _PersonCopyWith age(int value) {
    return _PersonCopyWith._(Person(
      name: _instance.name,
      age: value,
      address: _instance.address,
      workAddress: _instance.workAddress,
    ));
  }

  /// Update address field
  _PersonCopyWith address(Address value) {
    return _PersonCopyWith._(Person(
      name: _instance.name,
      age: _instance.age,
      address: value,
      workAddress: _instance.workAddress,
    ));
  }

  /// Update workAddress field
  _PersonCopyWith workAddress(Address? value) {
    return _PersonCopyWith._(Person(
      name: _instance.name,
      age: _instance.age,
      address: _instance.address,
      workAddress: value,
    ));
  }

  /// Build the final instance
  Person build() {
    return _instance as Person;
  }

  /// Traditional copyWith method
  Person call({
    String? name,
    int? age,
    Address? address,
    Address? workAddress,
  }) {
    return Person(
      name: name ?? _instance.name,
      age: age ?? _instance.age,
      address: address ?? _instance.address,
      workAddress: workAddress ?? _instance.workAddress,
    );
  }
}


/// Helper class for chained copyWith operations
class _CompanyCopyWith {
  final Company _instance;
  const _CompanyCopyWith._(this._instance);

  /// Update name field
  _CompanyCopyWith name(String value) {
    return _CompanyCopyWith._(Company(
      name: value,
      ceo: _instance.ceo,
      employees: _instance.employees,
    ));
  }

  /// Update ceo field
  _CompanyCopyWith ceo(Person value) {
    return _CompanyCopyWith._(Company(
      name: _instance.name,
      ceo: value,
      employees: _instance.employees,
    ));
  }

  /// Update employees field
  _CompanyCopyWith employees(List<Person> value) {
    return _CompanyCopyWith._(Company(
      name: _instance.name,
      ceo: _instance.ceo,
      employees: value,
    ));
  }

  /// Build the final instance
  Company build() {
    return _instance as Company;
  }

  /// Traditional copyWith method
  Company call({
    String? name,
    Person? ceo,
    List<Person>? employees,
  }) {
    return Company(
      name: name ?? _instance.name,
      ceo: ceo ?? _instance.ceo,
      employees: employees ?? _instance.employees,
    );
  }
}


/// Helper class for chained copyWith operations
class _DepartmentCopyWith {
  final Department _instance;
  const _DepartmentCopyWith._(this._instance);

  /// Update name field
  _DepartmentCopyWith name(String value) {
    return _DepartmentCopyWith._(Department(
      name: value,
      manager: _instance.manager,
      parentCompany: _instance.parentCompany,
      location: _instance.location,
    ));
  }

  /// Update manager field
  _DepartmentCopyWith manager(Person value) {
    return _DepartmentCopyWith._(Department(
      name: _instance.name,
      manager: value,
      parentCompany: _instance.parentCompany,
      location: _instance.location,
    ));
  }

  /// Update parentCompany field
  _DepartmentCopyWith parentCompany(Company value) {
    return _DepartmentCopyWith._(Department(
      name: _instance.name,
      manager: _instance.manager,
      parentCompany: value,
      location: _instance.location,
    ));
  }

  /// Update location field
  _DepartmentCopyWith location(Address? value) {
    return _DepartmentCopyWith._(Department(
      name: _instance.name,
      manager: _instance.manager,
      parentCompany: _instance.parentCompany,
      location: value,
    ));
  }

  /// Build the final instance
  Department build() {
    return _instance as Department;
  }

  /// Traditional copyWith method
  Department call({
    String? name,
    Person? manager,
    Company? parentCompany,
    Address? location,
  }) {
    return Department(
      name: name ?? _instance.name,
      manager: manager ?? _instance.manager,
      parentCompany: parentCompany ?? _instance.parentCompany,
      location: location ?? _instance.location,
    );
  }
}


/// Helper class for chained copyWith operations
class _OrganizationCopyWith {
  final Organization _instance;
  const _OrganizationCopyWith._(this._instance);

  /// Update name field
  _OrganizationCopyWith name(String value) {
    return _OrganizationCopyWith._(Organization(
      name: value,
      headquarters: _instance.headquarters,
      departments: _instance.departments,
      founder: _instance.founder,
      parentCompany: _instance.parentCompany,
    ));
  }

  /// Update headquarters field
  _OrganizationCopyWith headquarters(Address value) {
    return _OrganizationCopyWith._(Organization(
      name: _instance.name,
      headquarters: value,
      departments: _instance.departments,
      founder: _instance.founder,
      parentCompany: _instance.parentCompany,
    ));
  }

  /// Update departments field
  _OrganizationCopyWith departments(List<Department> value) {
    return _OrganizationCopyWith._(Organization(
      name: _instance.name,
      headquarters: _instance.headquarters,
      departments: value,
      founder: _instance.founder,
      parentCompany: _instance.parentCompany,
    ));
  }

  /// Update founder field
  _OrganizationCopyWith founder(Person value) {
    return _OrganizationCopyWith._(Organization(
      name: _instance.name,
      headquarters: _instance.headquarters,
      departments: _instance.departments,
      founder: value,
      parentCompany: _instance.parentCompany,
    ));
  }

  /// Update parentCompany field
  _OrganizationCopyWith parentCompany(Company? value) {
    return _OrganizationCopyWith._(Organization(
      name: _instance.name,
      headquarters: _instance.headquarters,
      departments: _instance.departments,
      founder: _instance.founder,
      parentCompany: value,
    ));
  }

  /// Build the final instance
  Organization build() {
    return _instance as Organization;
  }

  /// Traditional copyWith method
  Organization call({
    String? name,
    Address? headquarters,
    List<Department>? departments,
    Person? founder,
    Company? parentCompany,
  }) {
    return Organization(
      name: name ?? _instance.name,
      headquarters: headquarters ?? _instance.headquarters,
      departments: departments ?? _instance.departments,
      founder: founder ?? _instance.founder,
      parentCompany: parentCompany ?? _instance.parentCompany,
    );
  }
}


/// Helper class for chained copyWith operations
class _CorporateGroupCopyWith {
  final CorporateGroup _instance;
  const _CorporateGroupCopyWith._(this._instance);

  /// Update name field
  _CorporateGroupCopyWith name(String value) {
    return _CorporateGroupCopyWith._(CorporateGroup(
      name: value,
      mainOrganization: _instance.mainOrganization,
      subsidiaries: _instance.subsidiaries,
      chairman: _instance.chairman,
      registeredAddress: _instance.registeredAddress,
    ));
  }

  /// Update mainOrganization field
  _CorporateGroupCopyWith mainOrganization(Organization value) {
    return _CorporateGroupCopyWith._(CorporateGroup(
      name: _instance.name,
      mainOrganization: value,
      subsidiaries: _instance.subsidiaries,
      chairman: _instance.chairman,
      registeredAddress: _instance.registeredAddress,
    ));
  }

  /// Update subsidiaries field
  _CorporateGroupCopyWith subsidiaries(List<Organization> value) {
    return _CorporateGroupCopyWith._(CorporateGroup(
      name: _instance.name,
      mainOrganization: _instance.mainOrganization,
      subsidiaries: value,
      chairman: _instance.chairman,
      registeredAddress: _instance.registeredAddress,
    ));
  }

  /// Update chairman field
  _CorporateGroupCopyWith chairman(Person value) {
    return _CorporateGroupCopyWith._(CorporateGroup(
      name: _instance.name,
      mainOrganization: _instance.mainOrganization,
      subsidiaries: _instance.subsidiaries,
      chairman: value,
      registeredAddress: _instance.registeredAddress,
    ));
  }

  /// Update registeredAddress field
  _CorporateGroupCopyWith registeredAddress(Address? value) {
    return _CorporateGroupCopyWith._(CorporateGroup(
      name: _instance.name,
      mainOrganization: _instance.mainOrganization,
      subsidiaries: _instance.subsidiaries,
      chairman: _instance.chairman,
      registeredAddress: value,
    ));
  }

  /// Build the final instance
  CorporateGroup build() {
    return _instance as CorporateGroup;
  }

  /// Traditional copyWith method
  CorporateGroup call({
    String? name,
    Organization? mainOrganization,
    List<Organization>? subsidiaries,
    Person? chairman,
    Address? registeredAddress,
  }) {
    return CorporateGroup(
      name: name ?? _instance.name,
      mainOrganization: mainOrganization ?? _instance.mainOrganization,
      subsidiaries: subsidiaries ?? _instance.subsidiaries,
      chairman: chairman ?? _instance.chairman,
      registeredAddress: registeredAddress ?? _instance.registeredAddress,
    );
  }
}

