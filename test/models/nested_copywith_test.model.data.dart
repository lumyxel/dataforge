// Generated by data class generator
// DO NOT MODIFY BY HAND

part of 'nested_copywith_test.model.dart';

mixin _Address {
  abstract final String street;
  abstract final String city;
  abstract final String? zipCode;

  _AddressCopyWith get copyWith => _AddressCopyWith._(this);

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) return true;
    if (other is! Address) return false;

    if (street != other.street) {
      return false;
    }
    if (city != other.city) {
      return false;
    }
    if (zipCode != other.zipCode) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    return Object.hashAll([
      street,
      city,
      zipCode,
    ]);
  }

  @override
  String toString() {
    return 'Address(street: $street, city: $city, zipCode: $zipCode)';
  }

  Map<String, dynamic> toJson() {
    final map = <String, dynamic>{};
    map['street'] = street;
    map['city'] = city;
    if (zipCode != null) {
      map['zipCode'] = zipCode;
    }
    return map;
  }

  static Address fromJson(Map<String, dynamic> map) {
    return Address(
      street: SafeCasteUtil.safeCast<String>(map['street']) ?? "",
      city: SafeCasteUtil.safeCast<String>(map['city']) ?? "",
      zipCode: SafeCasteUtil.safeCast<String>(map['zipCode']),
    );
  }
}

mixin _Person {
  abstract final String name;
  abstract final int age;
  abstract final Address address;
  abstract final Address? workAddress;

  _PersonCopyWith get copyWith => _PersonCopyWith._(this);

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) return true;
    if (other is! Person) return false;

    if (name != other.name) {
      return false;
    }
    if (age != other.age) {
      return false;
    }
    if (address != other.address) {
      return false;
    }
    if (workAddress != other.workAddress) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    return Object.hashAll([
      name,
      age,
      address,
      workAddress,
    ]);
  }

  @override
  String toString() {
    return 'Person(name: $name, age: $age, address: $address, workAddress: $workAddress)';
  }

  Map<String, dynamic> toJson() {
    final map = <String, dynamic>{};
    map['name'] = name;
    map['age'] = age;
    map['address'] = address;
    if (workAddress != null) {
      map['workAddress'] = workAddress;
    }
    return map;
  }

  static Person fromJson(Map<String, dynamic> map) {
    return Person(
      name: SafeCasteUtil.safeCast<String>(map['name']) ?? "",
      age: SafeCasteUtil.safeCast<int>(map['age']) ?? 0,
      address: Address.fromJson((map['address'] ?? {}) as Map<String, dynamic>),
      workAddress: map['workAddress'] != null
          ? Address.fromJson(map['workAddress'] as Map<String, dynamic>)
          : null,
    );
  }
}

mixin _Company {
  abstract final String name;
  abstract final Person ceo;
  abstract final List<Person> employees;

  _CompanyCopyWith get copyWith => _CompanyCopyWith._(this);

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) return true;
    if (other is! Company) return false;

    if (name != other.name) {
      return false;
    }
    if (ceo != other.ceo) {
      return false;
    }
    if (!DeepCollectionEquality().equals(employees, other.employees)) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    return Object.hashAll([
      name,
      ceo,
      DeepCollectionEquality().hash(employees),
    ]);
  }

  @override
  String toString() {
    return 'Company(name: $name, ceo: $ceo, employees: $employees)';
  }

  Map<String, dynamic> toJson() {
    final map = <String, dynamic>{};
    map['name'] = name;
    map['ceo'] = ceo;
    map['employees'] = employees;
    return map;
  }

  static Company fromJson(Map<String, dynamic> map) {
    return Company(
      name: SafeCasteUtil.safeCast<String>(map['name']) ?? "",
      ceo: Person.fromJson((map['ceo'] ?? {}) as Map<String, dynamic>),
      employees: (map['employees'] as List<dynamic>?)
              ?.map((e) => Person.fromJson(e as Map<String, dynamic>))
              .toList()
              .cast<Person>() ??
          [],
    );
  }
}

/// Helper class for chained copyWith operations
class _AddressCopyWith {
  final _Address _instance;
  const _AddressCopyWith._(this._instance);

  /// Update street field
  Address street(String? value) {
    return Address(
      street: value ?? _instance.street,
      city: _instance.city,
      zipCode: _instance.zipCode,
    );
  }

  /// Update city field
  Address city(String? value) {
    return Address(
      street: _instance.street,
      city: value ?? _instance.city,
      zipCode: _instance.zipCode,
    );
  }

  /// Update zipCode field
  Address zipCode(String? value) {
    return Address(
      street: _instance.street,
      city: _instance.city,
      zipCode: value,
    );
  }

  /// Traditional copyWith method
  Address call({
    String? street,
    String? city,
    String? zipCode,
  }) {
    return Address(
      street: street ?? _instance.street,
      city: city ?? _instance.city,
      zipCode: zipCode ?? _instance.zipCode,
    );
  }
}

/// Helper class for chained copyWith operations
class _PersonCopyWith {
  final _Person _instance;
  const _PersonCopyWith._(this._instance);

  /// Update name field
  Person name(String? value) {
    return Person(
      name: value ?? _instance.name,
      age: _instance.age,
      address: _instance.address,
      workAddress: _instance.workAddress,
    );
  }

  /// Update age field
  Person age(int? value) {
    return Person(
      name: _instance.name,
      age: value ?? _instance.age,
      address: _instance.address,
      workAddress: _instance.workAddress,
    );
  }

  /// Update address field
  Person address(Address? value) {
    return Person(
      name: _instance.name,
      age: _instance.age,
      address: value ?? _instance.address,
      workAddress: _instance.workAddress,
    );
  }

  /// Update workAddress field
  Person workAddress(Address? value) {
    return Person(
      name: _instance.name,
      age: _instance.age,
      address: _instance.address,
      workAddress: value,
    );
  }

  /// Nested copyWith for address field
  _PersonNestedCopyWithAddress get addressBuilder {
    return _PersonNestedCopyWithAddress._(_instance);
  }

  /// Nested copyWith for workAddress field
  _PersonNestedCopyWithWorkAddress get workAddressBuilder {
    return _PersonNestedCopyWithWorkAddress._(_instance);
  }

  /// Traditional copyWith method
  Person call({
    String? name,
    int? age,
    Address? address,
    Address? workAddress,
  }) {
    return Person(
      name: name ?? _instance.name,
      age: age ?? _instance.age,
      address: address ?? _instance.address,
      workAddress: workAddress ?? _instance.workAddress,
    );
  }
}

/// Nested copyWith helper class for address field
class _PersonNestedCopyWithAddress {
  final _Person _instance;
  const _PersonNestedCopyWithAddress._(this._instance);

  /// Update address field using a copyWith function
  Person call(Address Function(Address) updater) {
    final currentValue = _instance.address;
    final updatedValue = updater(currentValue);
    return Person(
      name: _instance.name,
      age: _instance.age,
      address: updatedValue,
      workAddress: _instance.workAddress,
    );
  }
}

/// Nested copyWith helper class for workAddress field
class _PersonNestedCopyWithWorkAddress {
  final _Person _instance;
  const _PersonNestedCopyWithWorkAddress._(this._instance);

  /// Update workAddress field using a copyWith function
  Person call(Address Function(Address) updater) {
    final currentValue = _instance.workAddress;
    if (currentValue == null) return _instance as Person;
    final updatedValue = updater(currentValue);
    return Person(
      name: _instance.name,
      age: _instance.age,
      address: _instance.address,
      workAddress: updatedValue,
    );
  }
}

/// Helper class for chained copyWith operations
class _CompanyCopyWith {
  final _Company _instance;
  const _CompanyCopyWith._(this._instance);

  /// Update name field
  Company name(String? value) {
    return Company(
      name: value ?? _instance.name,
      ceo: _instance.ceo,
      employees: _instance.employees,
    );
  }

  /// Update ceo field
  Company ceo(Person? value) {
    return Company(
      name: _instance.name,
      ceo: value ?? _instance.ceo,
      employees: _instance.employees,
    );
  }

  /// Update employees field
  Company employees(List<Person>? value) {
    return Company(
      name: _instance.name,
      ceo: _instance.ceo,
      employees: value ?? _instance.employees,
    );
  }

  /// Nested copyWith for ceo field
  _CompanyNestedCopyWithCeo get ceoBuilder {
    return _CompanyNestedCopyWithCeo._(_instance);
  }

  /// Traditional copyWith method
  Company call({
    String? name,
    Person? ceo,
    List<Person>? employees,
  }) {
    return Company(
      name: name ?? _instance.name,
      ceo: ceo ?? _instance.ceo,
      employees: employees ?? _instance.employees,
    );
  }
}

/// Nested copyWith helper class for ceo field
class _CompanyNestedCopyWithCeo {
  final _Company _instance;
  const _CompanyNestedCopyWithCeo._(this._instance);

  /// Update ceo field using a copyWith function
  Company call(Person Function(Person) updater) {
    final currentValue = _instance.ceo;
    final updatedValue = updater(currentValue);
    return Company(
      name: _instance.name,
      ceo: updatedValue,
      employees: _instance.employees,
    );
  }
}
