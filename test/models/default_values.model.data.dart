// Generated by data class generator
// DO NOT MODIFY BY HAND

part of 'default_values.model.dart';

mixin _DefaultValues {
  abstract final int intValue;
  abstract final String stringValue;
  abstract final bool boolValue;
  abstract final double doubleValue;
  abstract final List<String> listValue;

  _DefaultValuesCopyWith get copyWith => _DefaultValuesCopyWith._(this);

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) return true;
    if (other is! DefaultValues) return false;

    if (intValue != other.intValue) {
      return false;
    }
    if (stringValue != other.stringValue) {
      return false;
    }
    if (boolValue != other.boolValue) {
      return false;
    }
    if (doubleValue != other.doubleValue) {
      return false;
    }
    if (!DeepCollectionEquality().equals(listValue, other.listValue)) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    return Object.hashAll([
      intValue,
      stringValue,
      boolValue,
      doubleValue,
      DeepCollectionEquality().hash(listValue),
    ]);
  }

  @override
  String toString() {
    return 'DefaultValues(intValue: $intValue, stringValue: $stringValue, boolValue: $boolValue, doubleValue: $doubleValue, listValue: $listValue)';
  }

  Map<String, dynamic> toJson() {
    final map = <String, dynamic>{};
    map['intValue'] = intValue;
    map['stringValue'] = stringValue;
    map['boolValue'] = boolValue;
    map['doubleValue'] = doubleValue;
    map['listValue'] = listValue;
    return map;
  }

  static DefaultValues fromJson(Map<String, dynamic> map) {
    return DefaultValues(
      intValue: SafeCasteUtil.safeCast<int>(map['intValue']) ?? 42,
      stringValue:
          SafeCasteUtil.safeCast<String>(map['stringValue']) ?? 'default',
      boolValue: SafeCasteUtil.safeCast<bool>(map['boolValue']) ?? true,
      doubleValue: SafeCasteUtil.safeCast<double>(map['doubleValue']) ?? 3.14,
      listValue: (map['listValue'] as List<dynamic>?)
              ?.map((e) => e.toString())
              .toList() ??
          const ['default'],
    );
  }
}

mixin _NestedDefaultValues {
  abstract final String name;
  abstract final DefaultValues nested;
  abstract final int? nullableValue;

  _NestedDefaultValuesCopyWith get copyWith =>
      _NestedDefaultValuesCopyWith._(this);

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) return true;
    if (other is! NestedDefaultValues) return false;

    if (name != other.name) {
      return false;
    }
    if (nested != other.nested) {
      return false;
    }
    if (nullableValue != other.nullableValue) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    return Object.hashAll([
      name,
      nested,
      nullableValue,
    ]);
  }

  @override
  String toString() {
    return 'NestedDefaultValues(name: $name, nested: $nested, nullableValue: $nullableValue)';
  }

  Map<String, dynamic> toJson() {
    final map = <String, dynamic>{};
    map['name'] = name;
    map['nested'] = nested;
    if (nullableValue != null) {
      map['nullableValue'] = nullableValue;
    }
    return map;
  }

  static NestedDefaultValues fromJson(Map<String, dynamic> map) {
    return NestedDefaultValues(
      name: SafeCasteUtil.safeCast<String>(map['name']) ?? 'nested_default',
      nested: map['nested'] != null
          ? DefaultValues.fromJson(map['nested'] as Map<String, dynamic>)
          : const DefaultValues(),
      nullableValue: SafeCasteUtil.safeCast<int>(map['nullableValue']),
    );
  }
}

/// Helper class for chained copyWith operations
class _DefaultValuesCopyWith {
  final _DefaultValues _instance;
  const _DefaultValuesCopyWith._(this._instance);

  /// Update intValue field
  DefaultValues intValue(int? value) {
    return DefaultValues(
      intValue: value ?? _instance.intValue,
      stringValue: _instance.stringValue,
      boolValue: _instance.boolValue,
      doubleValue: _instance.doubleValue,
      listValue: _instance.listValue,
    );
  }

  /// Update stringValue field
  DefaultValues stringValue(String? value) {
    return DefaultValues(
      intValue: _instance.intValue,
      stringValue: value ?? _instance.stringValue,
      boolValue: _instance.boolValue,
      doubleValue: _instance.doubleValue,
      listValue: _instance.listValue,
    );
  }

  /// Update boolValue field
  DefaultValues boolValue(bool? value) {
    return DefaultValues(
      intValue: _instance.intValue,
      stringValue: _instance.stringValue,
      boolValue: value ?? _instance.boolValue,
      doubleValue: _instance.doubleValue,
      listValue: _instance.listValue,
    );
  }

  /// Update doubleValue field
  DefaultValues doubleValue(double? value) {
    return DefaultValues(
      intValue: _instance.intValue,
      stringValue: _instance.stringValue,
      boolValue: _instance.boolValue,
      doubleValue: value ?? _instance.doubleValue,
      listValue: _instance.listValue,
    );
  }

  /// Update listValue field
  DefaultValues listValue(List<String>? value) {
    return DefaultValues(
      intValue: _instance.intValue,
      stringValue: _instance.stringValue,
      boolValue: _instance.boolValue,
      doubleValue: _instance.doubleValue,
      listValue: value ?? _instance.listValue,
    );
  }

  /// Traditional copyWith method
  DefaultValues call({
    int? intValue,
    String? stringValue,
    bool? boolValue,
    double? doubleValue,
    List<String>? listValue,
  }) {
    return DefaultValues(
      intValue: intValue ?? _instance.intValue,
      stringValue: stringValue ?? _instance.stringValue,
      boolValue: boolValue ?? _instance.boolValue,
      doubleValue: doubleValue ?? _instance.doubleValue,
      listValue: listValue ?? _instance.listValue,
    );
  }
}

/// Helper class for chained copyWith operations
class _NestedDefaultValuesCopyWith {
  final _NestedDefaultValues _instance;
  const _NestedDefaultValuesCopyWith._(this._instance);

  /// Update name field
  NestedDefaultValues name(String? value) {
    return NestedDefaultValues(
      name: value ?? _instance.name,
      nested: _instance.nested,
      nullableValue: _instance.nullableValue,
    );
  }

  /// Update nested field
  NestedDefaultValues nested(DefaultValues? value) {
    return NestedDefaultValues(
      name: _instance.name,
      nested: value ?? _instance.nested,
      nullableValue: _instance.nullableValue,
    );
  }

  /// Update nullableValue field
  NestedDefaultValues nullableValue(int? value) {
    return NestedDefaultValues(
      name: _instance.name,
      nested: _instance.nested,
      nullableValue: value,
    );
  }

  /// Nested copyWith for nested field
  _NestedDefaultValuesNestedCopyWithNested get nestedBuilder {
    return _NestedDefaultValuesNestedCopyWithNested._(_instance);
  }

  /// Traditional copyWith method
  NestedDefaultValues call({
    String? name,
    DefaultValues? nested,
    int? nullableValue,
  }) {
    return NestedDefaultValues(
      name: name ?? _instance.name,
      nested: nested ?? _instance.nested,
      nullableValue: nullableValue ?? _instance.nullableValue,
    );
  }
}

/// Nested copyWith helper class for nested field
class _NestedDefaultValuesNestedCopyWithNested {
  final _NestedDefaultValues _instance;
  const _NestedDefaultValuesNestedCopyWithNested._(this._instance);

  /// Update nested field using a copyWith function
  NestedDefaultValues call(DefaultValues Function(DefaultValues) updater) {
    final currentValue = _instance.nested;
    final updatedValue = updater(currentValue);
    return NestedDefaultValues(
      name: _instance.name,
      nested: updatedValue,
      nullableValue: _instance.nullableValue,
    );
  }
}
